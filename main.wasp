app FacialRecognition {
  wasp: {
    version: "^0.11.1"
  },
  title: "FacialRecognition",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int       @id @default(autoincrement())
    username String    @unique
    password String
    pictures Picture[]
psl=}

entity Picture {=psl
    id     Int    @id @default(autoincrement())
    url    String @unique
    user   User   @relation(fields: [userId], references: [id])
    userId Int
psl=}

action uploadPicture {
  fn: import { uploadPicture } from "@server/actions.js",
  entities: [User, Picture]
}

action findFaces {
  fn: import { findFaces } from "@server/actions.js",
  entities: [Picture]
}

query getUserPictures {
  fn: import { getUserPictures } from "@server/queries.js",
  entities: [User, Picture]
}

query getPictureResults {
  fn: import { getPictureResults } from "@server/queries.js",
  entities: [Picture]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/Dashboard.jsx",
  authRequired: true
}

route ResultsRoute { path: "/results/:pictureId", to: ResultsPage }
page ResultsPage {
  component: import { Results } from "@client/pages/Results.jsx",
  authRequired: false
}