app FacialRecognition {
  wasp: {
    version: "^0.11.1"
  },
  title: "FacialRecognition",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int      @id @default(autoincrement())
    username String   @unique
    password String
    searches Search[]
psl=}

entity Search {=psl
    id       Int      @id @default(autoincrement())
    imageUrl String
    results  Result[]
    user     User     @relation(fields: [userId], references: [id])
    userId   Int
psl=}

entity Result {=psl
    id        Int    @id @default(autoincrement())
    imageUrl  String
    sourceUrl String
    search    Search @relation(fields: [searchId], references: [id])
    searchId  Int
psl=}

action createSearch {
  fn: import { createSearch } from "@server/actions.js",
  entities: [User, Search, Result]
}

action addResult {
  fn: import { addResult } from "@server/actions.js",
  entities: [Search, Result]
}

action scrapeWebForSimilarImages {
  fn: import { scrapeWebForSimilarImages } from "@server/actions.js",
  entities: [Result]
}

query getUserSearches {
  fn: import { getUserSearches } from "@server/queries.js",
  entities: [User, Search]
}

query getSearchResults {
  fn: import { getSearchResults } from "@server/queries.js",
  entities: [Search, Result]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/DashboardPage.jsx",
  authRequired: true
}

route SearchResultsRoute { path: "/search/:searchId", to: SearchResultsPage }
page SearchResultsPage {
  component: import { SearchResults } from "@client/pages/SearchResults.jsx",
  authRequired: false
}

route UploadRoute { path: "/upload", to: UploadPage }
page UploadPage {
  component: import { UploadPage } from "@client/pages/Upload.jsx",
  authRequired: false
}